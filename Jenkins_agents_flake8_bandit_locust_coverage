pipeline {
    agent none

    environment {
        GIT_REPO = 'https://github.com/qapacker/Jenkins.git'
    }

    stages {
        stage('Preparar') {
            agent any
            steps {
                echo 'üîÑ Limpiando workspace'
                sh 'find . -mindepth 1 -maxdepth 1 -exec rm -rf {} +'
                echo 'üîó Clonando repositorio'
                sh "git clone ${GIT_REPO} ."
                stash includes: '**', name: 'source_code'
            }
        }

        stage('An√°lisis Est√°tico') {
            agent { label 'agent-3' }
            steps {
                echo 'üì• Recuperando c√≥digo'
                unstash 'source_code'

                echo 'üîç Ejecutando flake8'
                script {
                    sh 'flake8 . --exit-zero > flake8.log'
                    def count = sh(script: 'wc -l < flake8.log', returnStdout: true).trim().toInteger()
                    echo "üìù flake8 findings: ${count}"
                    if (count >= 10) {
                        currentBuild.result = 'UNSTABLE'
                        echo "üî¥ UNHEALTHY por flake8"
                    } else if (count >= 8) {
                        currentBuild.result = 'UNSTABLE'
                        echo "üü† UNSTABLE por flake8"
                    }
                }

                echo 'üõ°Ô∏è Ejecutando bandit'
                script {
                    def banditStatus = sh(script: 'bandit -r . -f json -o bandit.json', returnStatus: true)
                    def findings = 0
                    if (fileExists('bandit.json')) {
                        findings = sh(script: '''
                          python3 -c "import json; print(len(json.load(open('bandit.json'))['results']))"
                        ''', returnStdout: true).trim().toInteger()
                    }
                    echo "üìù bandit findings: ${findings}"
                    if (findings >= 4) {
                        currentBuild.result = 'UNSTABLE'
                        echo "üî¥ UNHEALTHY por bandit"
                    } else if (findings >= 2) {
                        currentBuild.result = 'UNSTABLE'
                        echo "üü† UNSTABLE por bandit"
                    }
                }

                archiveArtifacts artifacts: 'flake8.log, bandit.json', allowEmptyArchive: true
            }
        }

        stage('Test') {
            agent { label 'agent-1' }
            steps {
                echo 'üì• Recuperando c√≥digo'
                unstash 'source_code'

                echo 'üöÄ Levantando API Flask para pruebas'
                sh '''
                  nohup python3 app/api.py > flask.log 2>&1 &
                  sleep 3
                '''

                echo '‚úÖ Ejecutando pytest contra localhost:5000'
                sh '''
                  export PYTHONPATH=$(pwd)
                  export BASE_URL=http://localhost:5000
                  /opt/venv/bin/pytest test/
                '''
            }
        }

        stage('Desplegar') {
            agent { label 'agent-2' }
            steps {
                echo 'üì• Recuperando c√≥digo'
                unstash 'source_code'

                echo 'üê≥ Construyendo imagen Docker'
                sh 'docker build -t myapp .'

                echo 'üöÄ Lanzando contenedor'
                sh 'docker run -d -p 7000:5000 myapp'
            }
        }

        stage('Performance') {
            agent { label 'agent-4' }
            steps {
                echo 'üì• Recuperando c√≥digo'
                unstash 'source_code'

                echo 'üöÄ Levantando API Flask para pruebas de carga'
                sh '''
                  nohup python3 app/api.py > flask.log 2>&1 &
                  sleep 3
                '''

                echo 'üìä Ejecutando test de carga con Locust'
                sh '''
                  locust -f test/locust/locustfile.py --headless --host=http://localhost:5000 -u 5 -r 5 -t 1m --csv=locust_result
                '''

                archiveArtifacts artifacts: 'locust_result*', allowEmptyArchive: true
            }
        }
    }

    post {
        success {
            echo '‚úÖ Pipeline exitoso'
        }
        failure {
            echo '‚ùå Pipeline fallido'
        }
        unstable {
            echo '‚ö†Ô∏è Pipeline inestable por hallazgos en flake8 o bandit'
        }
    }
}