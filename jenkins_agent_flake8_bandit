pipeline {
    agent none

    environment {
        PYTHON_ENV = 'venv'
        GIT_REPO   = 'https://github.com/qapacker/Jenkins.git'
    }

    stages {
        stage('Preparar') {
            agent any
            steps {
                echo 'üîÑ Limpiando workspace'
                sh 'find . -mindepth 1 -maxdepth 1 -exec rm -rf {} +'
                echo 'üîó Clonando repositorio'
                sh "git clone ${GIT_REPO} ."
                stash includes: '**', name: 'source_code'
            }
        }

        stage('An√°lisis Est√°tico') {
            agent { label 'agent-3' }
            steps {
                echo 'üì• Recuperando c√≥digo'
                unstash 'source_code'

                echo 'üîç Ejecutando flake8'
                sh 'flake8 . --exit-zero'

                echo 'üõ°Ô∏è Ejecutando bandit'
                sh 'bandit -r .'
            }
        }

        stage('Test') {
            agent { label 'agent-1' }
            steps {
                echo 'üì• Recuperando c√≥digo'
                unstash 'source_code'

                echo 'üõ†Ô∏è Configurando entorno Python'
                sh '''
                  bash -lc "
                    python3 -m venv ${PYTHON_ENV} &&
                    source ${PYTHON_ENV}/bin/activate &&
                    pip install --upgrade pip &&
                    pip install --no-cache-dir -r requirements.txt
                  "
                '''

                echo 'üöÄ Arrancando API Flask en background'
                sh '''
                  bash -lc "
                    source ${PYTHON_ENV}/bin/activate &&
                    nohup python app/api.py > flask.log 2>&1 &
                    sleep 3
                  "
                '''

                echo '‚úÖ Ejecutando pytest contra localhost:5000'
                sh '''
                  bash -lc "
                    source ${PYTHON_ENV}/bin/activate &&
                    export PYTHONPATH=$(pwd) &&
                    export BASE_URL=http://localhost:5000 &&
                    pytest test/
                  "
                '''
            }
        }

        stage('Desplegar') {
            agent { label 'agent-2' }
            steps {
                echo 'üì• Recuperando c√≥digo'
                unstash 'source_code'

                echo 'üê≥ Construyendo imagen Docker'
                sh 'docker build -t myapp .'

                echo 'üöÄ Lanzando contenedor'
                sh 'docker run -d -p 7000:5000 myapp'
            }
        }
    }

    post {
        success {
            echo '‚úÖ Pipeline exitoso'
        }
        failure {
            echo '‚ùå Pipeline fallido'
        }
    }
}
